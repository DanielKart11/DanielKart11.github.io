const e=JSON.parse('{"key":"v-f8fed74e","path":"/java/io/io-design-patterns.html","title":"Java IO 设计模式总结","lang":"zh-CN","frontmatter":{"title":"Java IO 设计模式总结","category":"Java","tag":["Java IO","Java基础"],"description":"这篇文章我们简单来看看我们从 IO 中能够学习到哪些设计模式的应用。 装饰器模式 装饰器（Decorator）模式 可以在不改变原有对象的情况下拓展其功能。 装饰器模式通过组合替代继承来扩展原始类的功能，在一些继承关系比较复杂的场景（IO 这一场景各种类的继承关系就比较复杂）更加实用。 对于字节流来说， FilterInputStream （对应输入流）和FilterOutputStream（对应输出流）是装饰器模式的核心，分别用于增强 InputStream 和OutputStream子类对象的功能。","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/java/io/io-design-patterns.html"}],["meta",{"property":"og:site_name","content":"JavaGuide(Java面试 + 学习指南)"}],["meta",{"property":"og:title","content":"Java IO 设计模式总结"}],["meta",{"property":"og:description","content":"这篇文章我们简单来看看我们从 IO 中能够学习到哪些设计模式的应用。 装饰器模式 装饰器（Decorator）模式 可以在不改变原有对象的情况下拓展其功能。 装饰器模式通过组合替代继承来扩展原始类的功能，在一些继承关系比较复杂的场景（IO 这一场景各种类的继承关系就比较复杂）更加实用。 对于字节流来说， FilterInputStream （对应输入流）和FilterOutputStream（对应输出流）是装饰器模式的核心，分别用于增强 InputStream 和OutputStream子类对象的功能。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-01T07:42:02.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:tag","content":"Java IO"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:modified_time","content":"2023-09-01T07:42:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java IO 设计模式总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-01T07:42:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"装饰器模式","slug":"装饰器模式","link":"#装饰器模式","children":[]},{"level":2,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[]},{"level":2,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1657967566000,"updatedTime":1693554122000,"contributors":[{"name":"Guide","email":"koushuangbwcx@163.com","commits":2},{"name":"Richard Wu","email":"36195120+kingstar718@users.noreply.github.com","commits":2},{"name":"CyrilFeng","email":"1491087363@qq.com","commits":1},{"name":"Erzbir","email":"2978086497@qq.com","commits":1},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1},{"name":"cxhello","email":"49056040+cxhello@users.noreply.github.com","commits":1},{"name":"guide","email":"koushuangbwcx@163.com","commits":1}]},"readingTime":{"minutes":7.8,"words":2340},"filePathRelative":"java/io/io-design-patterns.md","localizedDate":"2022年7月16日","excerpt":"<p>这篇文章我们简单来看看我们从 IO 中能够学习到哪些设计模式的应用。</p>\\n<h2> 装饰器模式</h2>\\n<p><strong>装饰器（Decorator）模式</strong> 可以在不改变原有对象的情况下拓展其功能。</p>\\n<p>装饰器模式通过组合替代继承来扩展原始类的功能，在一些继承关系比较复杂的场景（IO 这一场景各种类的继承关系就比较复杂）更加实用。</p>\\n<p>对于字节流来说， <code>FilterInputStream</code> （对应输入流）和<code>FilterOutputStream</code>（对应输出流）是装饰器模式的核心，分别用于增强 <code>InputStream</code> 和<code>OutputStream</code>子类对象的功能。</p>","copyright":{"author":"JavaGuide(javaguide.cn)","license":"MIT"},"autoDesc":true}');export{e as data};
